/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my_messenger;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 
 */
public class Main_Frame extends javax.swing.JFrame {
Client client;    
Server server;    

String uname;
boolean is_server;
int active_cl=0,my_id;


/**
 
    * Creates new form Main_Frame
     */
    public Main_Frame() {
        initComponents();
        this.setTitle("Chat_box (Not Connected)");
        chat_area.setEditorKit(new WrapEditorKit());
        chat_area.setUI(new javax.swing.plaf.basic.BasicEditorPaneUI());
        chat_area.setBackground(new Color(0,153,153));
 
       
        this.getRootPane().setDefaultButton(btn_send);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        chat_area = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        image_field = new javax.swing.JTextField();
        btn_send_img = new javax.swing.JButton();
        btn_send = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        chat_field = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        mnu_clear_chat = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnu_server = new javax.swing.JMenuItem();
        mnu_client = new javax.swing.JMenuItem();
        mnu_reset = new javax.swing.JMenuItem();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(51, 0, 153));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setAutoscrolls(true);

        chat_area.setEditable(false);
        chat_area.setBackground(new java.awt.Color(0, 153, 153));
        chat_area.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        chat_area.setForeground(new java.awt.Color(255, 255, 255));
        chat_area.setAlignmentX(2.5F);
        chat_area.setDragEnabled(true);
        chat_area.setMargin(new java.awt.Insets(15, 15, 15, 15));
        jScrollPane2.setViewportView(chat_area);

        image_field.setEditable(false);
        image_field.setBackground(new java.awt.Color(255, 255, 255));
        image_field.setText("Click here to attach file");
        image_field.setEnabled(false);
        image_field.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                image_fieldMouseClicked(evt);
            }
        });
        image_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                image_fieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(image_field, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(image_field, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addContainerGap())
        );

        btn_send_img.setText("Send File");
        btn_send_img.setEnabled(false);
        btn_send_img.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn_send_img.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_send_imgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_send_img, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_send_img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        btn_send.setBackground(new java.awt.Color(0, 102, 102));
        btn_send.setText("Send");
        btn_send.setAutoscrolls(true);
        btn_send.setEnabled(false);
        btn_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendActionPerformed(evt);
            }
        });

        chat_field.setColumns(20);
        chat_field.setLineWrap(true);
        chat_field.setRows(5);
        chat_field.setWrapStyleWord(true);
        chat_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chat_fieldKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(chat_field);

        jMenu1.setText("Chat");

        jMenuItem4.setText("Save");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        mnu_clear_chat.setText("Clear");
        mnu_clear_chat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_clear_chatActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_clear_chat);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Connect");

        mnu_server.setText("As Server");
        mnu_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_serverActionPerformed(evt);
            }
        });
        jMenu2.add(mnu_server);

        mnu_client.setText("As Client");
        mnu_client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_clientActionPerformed(evt);
            }
        });
        jMenu2.add(mnu_client);

        mnu_reset.setText("Reset");
        mnu_reset.setEnabled(false);
        mnu_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_resetActionPerformed(evt);
            }
        });
        jMenu2.add(mnu_reset);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_send, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_send, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnu_clientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_clientActionPerformed
         String adress =JOptionPane.showInputDialog(null, "Enter IP Address","localhost");
        if(adress==null || adress.trim().isEmpty())return;
        String port=JOptionPane.showInputDialog(null, "Enter Port No","1043");
        if(port==null ||port.trim().isEmpty() )return ;
        int q;
        try{ q=Integer.parseInt(port);}catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Port no in wrong format");
            return ;
        }
        uname=JOptionPane.showInputDialog(null, "Enter Your Name","Arushi Singla"); 
        if(uname==null ||uname.trim().isEmpty())return;
        
    client=new Client();
    
        boolean connection= client.connect_client(adress,q,uname);
      
        if(connection)
        {
          this.setTitle("Chat_Boxx Connected As:-"+uname);
         is_server=false;
         mnu_server.setEnabled(false);
       mnu_client.setEnabled(false);
       mnu_reset.setEnabled(true);
        btn_send.setEnabled(true);
       image_field.setEnabled(true);
        }
    }//GEN-LAST:event_mnu_clientActionPerformed

    private void btn_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendActionPerformed

  if(chat_field.getText().trim().length()==0) return;
    set_chat_text("You:\r\n"+chat_field.getText(),Color.green,StyleConstants.ALIGN_RIGHT);
    if (is_server)
            {
                server.send_to_all(-1,uname+":\r\n"+chat_field.getText());
                
                    
            }
    else
    {
     client.send_msg(chat_field.getText());
    }
        chat_field.setText("");
       // TODO add your handling code here:
    }//GEN-LAST:event_btn_sendActionPerformed



    private void mnu_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_serverActionPerformed
      
      String port=JOptionPane.showInputDialog(null, "Enter Port No","1043");
        if(port==null ||port.trim().isEmpty() )return ;
        int q;
        try{ q=Integer.parseInt(port);}catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Port no in wrong format");
            return ;
        }
        uname=JOptionPane.showInputDialog(null, "Enter Your Name","Arushi Singla"); 
        if(uname==null ||uname.trim().isEmpty())return;  
    server=new Server();
    
        boolean connection= server.connect_Server(q,uname);
      
        if(connection)
        {
          this.setTitle("Chat_Boxx Connected As:-"+uname);
         is_server=true;
         mnu_server.setEnabled(false);
       mnu_client.setEnabled(false);
       mnu_reset.setEnabled(true);
       btn_send.setEnabled(true);
       image_field.setEnabled(true);
        }
    }//GEN-LAST:event_mnu_serverActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    int op=       JOptionPane.showConfirmDialog(this, " Any Open Connection Will Be Closed.\n Are You Sure?", "Chat_boxx", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if(op==JOptionPane.YES_OPTION)
    {
        if(server!=null && is_server)
        {
        server.cleanClose();
        server=null;
        }
        else if(client!=null && is_server==false)
        {
        client.cleanClose();
        client=null;
        }
        System.exit(0);
        }
       
    }//GEN-LAST:event_formWindowClosing

    private void image_fieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_image_fieldMouseClicked
        JFileChooser jf = new JFileChooser();
       FileNameExtensionFilter ef= new FileNameExtensionFilter("Image Files Only",ImageIO.getReaderFileSuffixes());
       jf.setFileFilter(ef);
       
     jf.addChoosableFileFilter(ef);
     ef= new FileNameExtensionFilter("Office Files(.doc,*.docx,*.xls,*.xlsx,*.ppt,*.pptx)",new String[]{"doc","docx","xls","xlsx","ppt","pptx"});
     jf.addChoosableFileFilter(ef);
      ef= new FileNameExtensionFilter("PDF Files(*.pdf)","pdf");
     jf.addChoosableFileFilter(ef);
     ef= new FileNameExtensionFilter("Audio/Video Files",new String[]{"mp3","wav","mp4","avi","3gp","wmv","mkv"});
     jf.addChoosableFileFilter(ef);
    
     jf.setAcceptAllFileFilterUsed(false);
        if(jf.showOpenDialog(this)==JFileChooser.APPROVE_OPTION)
        {

            image_field.setText(jf.getSelectedFile().getAbsolutePath());
            btn_send_img.setEnabled(true);
        }
    }//GEN-LAST:event_image_fieldMouseClicked

    private void btn_send_imgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_send_imgActionPerformed
      
        File ff=new File(image_field.getText());
        if (ff.length()>(100*1024*1024))
        {
         JOptionPane.showMessageDialog(null, "File size must be less than 100MB ");
         return;
        }
         set_chat_image(uname,Color.green,StyleConstants.ALIGN_RIGHT,ff);
  
        if (is_server) {
            server.send_to_all_image(-1,uname,ff);
            }
            else{
                client.send_image(ff);
            }
        image_field.setText("Click here to attach file");
        btn_send_img.setEnabled(false);
    }//GEN-LAST:event_btn_send_imgActionPerformed

    private void image_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_image_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_image_fieldActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
      JFileChooser jf = new JFileChooser();
        FileNameExtensionFilter ef= new FileNameExtensionFilter("Text File",".txt");
        jf.setFileFilter(ef);
        jf.setAcceptAllFileFilterUsed(false);
        if(jf.showSaveDialog(this)==JFileChooser.APPROVE_OPTION)
     try
     { 
         File f=new File(jf.getSelectedFile().getAbsolutePath()+".txt");
         BufferedOutputStream bf= new BufferedOutputStream(new FileOutputStream(f));
//    kit.write(bf, st, st.getStartPosition().getOffset(),st.getLength());
  bf.write(chat_area.getText().getBytes());
         bf.close();
     }
     catch(Exception e){}
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void mnu_clear_chatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_clear_chatActionPerformed
    int op=       JOptionPane.showConfirmDialog(this, "Are You Sure To Clear All", "Chat_boxx", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if(op==JOptionPane.YES_OPTION)
    {
        chat_area.setText("");
    }
// TODO add your handling code here:
    }//GEN-LAST:event_mnu_clear_chatActionPerformed

    private void mnu_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_resetActionPerformed
         int op=       JOptionPane.showConfirmDialog(this, " Any Open Connection Will Be Closed.\n   Are You Sure?", "Chat_boxx", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if(op==JOptionPane.YES_OPTION)
    {
          if(is_server)
        {
        server.cleanClose();
        }
        else
        {
        client.cleanClose();
        } 
       this.setTitle("Chat_boxx (Not Connected)");
        mnu_server.setEnabled(true);
       mnu_client.setEnabled(true);
       mnu_reset.setEnabled(false);
        btn_send.setEnabled(false);
       image_field.setEnabled(false);
        }
    }//GEN-LAST:event_mnu_resetActionPerformed

    private void chat_fieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chat_fieldKeyPressed
 if (evt.getKeyCode()==10){ 
    if(evt.isShiftDown()){chat_field.setText(chat_field.getText()+"\n");}
    else {btn_send.doClick(); }
    evt.consume(); 
     }          // TODO add your handling code here:
    }//GEN-LAST:event_chat_fieldKeyPressed

  static  void set_chat_text(String str, Color c,int align)
    {
         /*JLabel jl=new JLabel("<html>"+str+"</html>");
        jl.setForeground(c.white);
        jl.setMaximumSize(new Dimension(180,0));
      //jl.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 0)));
        jl.setVerticalTextPosition(JLabel.TOP);
        jl.setHorizontalTextPosition(JLabel.CENTER);
        chat_area.setCaretPosition(chat_area.getDocument().getLength());
        
        chat_area.insertComponent(jl);
        SimpleAttributeSet attrib=new SimpleAttributeSet();
        StyleConstants.setForeground(attrib,c.white);
        StyleConstants.setAlignment(attrib,align);
        try{
        chat_area.getDocument().insertString( chat_area.getDocument().getLength(), "\n\n", attrib);
        }catch(Exception e){}
       */
        StyledDocument doc=chat_area.getStyledDocument();
        SimpleAttributeSet attrib=new SimpleAttributeSet();
        StyleConstants.setForeground(attrib,c.white);
        StyleConstants.setAlignment(attrib,align);
       // StyleConstants.setSpaceAbove(attrib,5);
      //  if( align==StyleConstants.ALIGN_LEFT)
        //{
          //    StyleConstants.setRightIndent(attrib,2);
            
        //}
        //else if( align==StyleConstants.ALIGN_RIGHT)
        //{
               StyleConstants.setLeftIndent(attrib,2);
      
         
        //}
               
        
        try{
        doc.insertString(doc.getLength(), "\n"+str+"\n", attrib);
      //  doc.setParagraphAttributes(doc.getLength(),1, attrib, false);
        }
        catch(Exception ee){ JOptionPane.showMessageDialog(null, ee);}
        
        
    }
    
    static void  set_chat_image(String str, Color c,int align, final File ff)
    { 
       
       
        JLabel jl=new JLabel(str);String type=null;
      int ind=ff.getName().lastIndexOf(".");
      if(ind>0){type=ff.getName().substring(ind+1);}
       if(type.equals("jpg") || type.equals("jpeg") || type.equals("png") ||type.equals("gif"))
       {
           jl=new JLabel(str);
            ImageIcon img=new ImageIcon(ff.getAbsolutePath());
             jl.setIcon(new ImageIcon(img.getImage().getScaledInstance(120, 120, 1)));
       }
       else
       {
           jl=new JLabel("<html><br>"+type+" File"+"<br><br><br>"+ff.getName()+"<br><br>"+filesize(ff.length())+"<br><br></html");
           jl.setOpaque(true);
           jl.setBackground( new Color(0,153,153));
          jl.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), str, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Verdana", 1, 12), java.awt.Color.white)); // NOI18N

       }   
       jl.setFont(new java.awt.Font("Verdana", 1, 12));
        jl.setMaximumSize(new Dimension(140,0));
        jl.setVerticalTextPosition(JLabel.TOP);
        jl.setHorizontalTextPosition(JLabel.CENTER);
        jl.setForeground(c.white);
     
        jl.addMouseListener(new java.awt.event.MouseListener() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
             try{Runtime.getRuntime().exec("explorer "+ff.getAbsolutePath());}catch(Exception e){}
            }

            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}
        });
        jl.setToolTipText("Click To open");
        chat_area.setCaretPosition(chat_area.getDocument().getLength());
        chat_area.insertComponent(jl);
        SimpleAttributeSet attrib=new SimpleAttributeSet();
        StyleConstants.setForeground(attrib,c.white);
        StyleConstants.setAlignment(attrib,align);
        try{
        chat_area.getDocument().insertString( chat_area.getDocument().getLength(), "\n\n", attrib);
        }catch(Exception e){}
      /* HTMLDocument doc=(HTMLDocument)chat_area.getStyledDocument();
        
        SimpleAttributeSet attrib=new SimpleAttributeSet();
        
        StyleConstants.setForeground(attrib,c);
        StyleConstants.setAlignment(attrib,StyleConstants.ALIGN_RIGHT);
        StyleConstants.setIcon(attrib,new ImageIcon(img.getImage().getScaledInstance(120, 120, 1)) );
        try{
            chat_area.setText("<html><body><a href='#'>hello</a></body></html>");
        
        doc.insertAfterEnd(doc.getCharacterElement(doc.getLength()),"\n");
        doc.setParagraphAttributes(doc.getLength(), str.length(), attrib, false);
        }
        catch(Exception ee){}*/
    }
static String  filesize(double len)
{
    if(len<1024)
    {
        return len+" bytes";
    }
    else if(len<(1024*1024))
    {
        return new DecimalFormat("#.##").format(len/1024)+" KB";
    }
     else 
    {
        return new DecimalFormat("#.##").format(len/(1024*1024))+" MB";
    }

}
JLabel my_label(String str)
{
    ImageIcon im=new ImageIcon(str);
    
JLabel jl=new JLabel(im){

        @Override
        public void paint(Graphics g) {
         super.paintComponent(g);
     //   g.drawImage(im.getImage(),this.getSize().width,this.getSize().height, null);
        }

};

return jl;
        
}
    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_send;
    private javax.swing.JButton btn_send_img;
    private static javax.swing.JTextPane chat_area;
    private javax.swing.JTextArea chat_field;
    private javax.swing.JTextField image_field;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem mnu_clear_chat;
    private javax.swing.JMenuItem mnu_client;
    private javax.swing.JMenuItem mnu_reset;
    private javax.swing.JMenuItem mnu_server;
    // End of variables declaration//GEN-END:variables
}
